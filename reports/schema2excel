#!/bin/sh
#
# Copyright 2015-2017, Population Health Research Institute
# Copyright 2015-2017, Martin Renters
#
# This file is part of the DataFax Toolkit.
#
# The DataFax Toolkit is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# The DataFax Toolkit is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with The DataFax Toolkit.  If not, see <http://www.gnu.org/licenses/>.
#

##########################################################################
# Create an Excel file from a DFschema file
#
# Initial: Martin Renters, 2015-06-04
# Revised: Martin Renters, 2015-09-10 (added DataFax 2014.x support)
# Revised: Martin Renters, 2015-09-11 (add timestamp to outfile name)
##########################################################################
if [ $# -lt 1 ]
then
	echo "No study Specified"
	exit 2;
fi

FORMAT="xml"
if [ $# -gt 1 ]
then
	FORMAT=$2;
fi

if [ "$FORMAT" != "xml" -a "$FORMAT" != "csv" -a "$FORMAT" != "pipe" ]
then
	echo "Invalid format specified. Options are: xml, csv, pipe"
	exit 2;
fi

echo "Format=$FORMAT   (options are: xml, csv, pipe)"

if [ -z "$DATAFAX_DIR" ]
then
	DATAFAX_DIR=/opt/datafax
fi

STUDY_DIR=`$DATAFAX_DIR/bin/DFgetparam.rpc -s $1 STUDY_DIR`
if [ -z "$STUDY_DIR" ]
then
	echo "Unable to determine STUDY_DIR"
	exit 2
fi
STUDY_NAME=`$DATAFAX_DIR/bin/DFgetparam.rpc -s $1 STUDY_NAME`
STUDY_NAME="$STUDY_NAME ($1)"

echo "Generating Excel file from DFschema file..."

DATE=`date +%Y%m%d-%H%M%S`
OUTFILE="$STUDY_DIR/work/schema-$DATE.$FORMAT"
GENERIC_OUTFILE="$STUDY_DIR/work/schema.$FORMAT"

######################################################################
# Read and compare schema files
######################################################################
gawk '
function join_string(from, to)
{
	s="";
	for (i=from; i<= to; i++) {
		if (s != "") s = s " ";
		s = s $i;
	}
	return s;
}

function convert_schema(name)
{
	s_field = "";
	while ((getline < name) > 0) {
		if ($1 == "%u") { if (substr($2,1,3)=="4.3") v43=1; else v43=0;}
		if ($1 == "%P") { s_plate = $2; s_field = ""; first_field=7;}
		if ($1 == "%E") { if ($2 == 2) first_field = 6; }
		if ($1 == "%p") s_platename=join_string(2,NF);
		if ($1 == "%n") s_fieldcount=$2-2;
		if ($1 == "%I") {
			s_field = $2;
			s_unique = "";
			s_name = "";
			s_alias = "";
			s_store = "";
			s_display = "";
			s_desc = "";
			s_ecpe = "";
			s_ecpx = "";
			s_ecfe = "";
			s_ecfx = "";
			s_type = "";
			s_style = "";
			s_format = "";
			s_coding = "";
			s_reason = "";
			s_hidden = "No";
			s_legal = "";
			s_skipc = "";
			s_skipn = "";
			s_help = "";
			s_required = "";
			s_reasonlevel = "";
			s_reasonblank = "";
			s_year = "";
			s_impute = "";
			s_visitdate = "";
		}
		if ($1 == "%i") s_unique = $2;
		if ($1 == "%v") s_name = $2;
		if ($1 == "%V") s_alias = $2;
		if ($1 == "%W") s_store = $2;
		if ($1 == "%w") s_display = $2;
		if ($1 == "%g") s_reason = $2;
		if ($1 == "%h") {
			if ($2 == 1) s_hidden = "Yes";
			else s_hidden = "??";
		}
		if ($1 == "%s") {
			s_skipn = $2;
			s_skipc = join_string(3, NF);
		}
		if ($1 == "%g") {
			if ($2 == 0) {
				s_reasonlevel = "None";
			} else {
				s_reasonlevel = $2;
				s_reasonblank = "No";
				if ($3 == 1) s_reasonblank = "Yes";
			}
		}
		if ($1 == "%L") s_legal = substr($0, 4);
		if ($1 == "%D") s_desc = substr($0, 4);
		if ($1 == "%j") s_ecpe = substr($0, 4);
		if ($1 == "%k") s_ecpx = substr($0, 4);
		if ($1 == "%J") s_ecfe = substr($0, 4);
		if ($1 == "%K") s_ecfx = substr($0, 4);
		if ($1 == "%H") s_help = substr($0, 4);
		if ($1 == "%T") {
			s_type = $2;
			if ($2 == "date") {
				if (v43==1) {
					s_style = join_string(3,NF-2);
					s_year = $(NF-1);
					if ($(NF)==0) s_impute = "None";
					if ($(NF)==1) s_impute = "Start";
					if ($(NF)==2) s_impute = "Middle";
					if ($(NF)==3) s_impute = "End";	
					if (s_style == "VisitDate") {
						s_visitdate = "Yes";
					} else {
						s_visitdate = "No";
					}
				} else {
					s_style = join_string(3,NF-3);
					s_year = $(NF-2);
					if ($(NF-1)==0) s_impute = "None";
					if ($(NF-1)==1) s_impute = "Start";
					if ($(NF-1)==2) s_impute = "Middle";
					if ($(NF-1)==3) s_impute = "End";	
					if ($(NF)=="VisitDate") {
						s_visitdate = "Yes";
					} else {
						s_visitdate = "No";
					}
				}
			} else {
				s_style = join_string(3, NF);
			}
		}
		if ($1 == "%A") s_required = $2;
		if ($1 == "%F") s_format = substr($0, 4);
		if (($1 == "%c") || ($1 == "%C")) {
			s_coding = s_coding "[" $2 "=" join_string(3,NF) "] ";
		}
		if (($0 == "") && (s_plate < 501) &&
			(s_field >= first_field) && (s_field < s_fieldcount)) {
			#       Pn P  F  Fn al ty st vd ds le he Re rl rb hi di st fm yr im sn sc pe fe fx px co
			printf("%s|%d|%d|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s\n",
				s_platename,
				s_plate,
				s_field,
				s_name,
				s_alias,
				s_type,
				s_style,
				s_visitdate,
				s_desc,
				s_legal,
				s_help,
				s_required,
				s_reasonlevel,
				s_reasonblank,
				s_hidden,
				s_display,
				s_store,
				s_format,
				s_year,
				s_impute,
				s_skipn,
				s_skipc,
				s_ecpe,
				s_ecfe,
				s_ecfx,
				s_ecpx,
				s_coding);
			s_field = "";
		}
	}
	close(name);
}

BEGIN {
	if (ARGC < 1) {
		print "usage: schema2excel schema-file";
		exit 2;
	}
	v43=1;
	convert_schema(ARGV[1]);

}' $STUDY_DIR/lib/DFschema | sort -t\| -k2,2n -k3,3n | \

######################################################################
# Format stdout from above into Excel spreadsheet
######################################################################
gawk -vstudy_name="$STUDY_NAME" -vcenter_header="DFschema" -vformat=$FORMAT '
function xml(s)
{
	gsub("&", "\\&amp;", s);
	gsub("<", "\\&lt;", s);
	gsub(">", "\\&gt;", s);
	gsub("\"", "\\&quot;", s);
	return s;
}

function excel_open()
{
	printf("<?xml version=\"1.0\"?>\n");
	printf("<?mso-application progid=\"Excel.Sheet\"?>\n");
	printf("<Workbook xmlns=\"urn:schemas-microsoft-com:office:spreadsheet\"\n");
 	printf("xmlns:o=\"urn:schemas-microsoft-com:office:office\"\n");
 	printf("xmlns:x=\"urn:schemas-microsoft-com:office:excel\"\n");
 	printf("xmlns:ss=\"urn:schemas-microsoft-com:office:spreadsheet\"\n");
 	printf("xmlns:html=\"http://www.w3.org/TR/REC-html40\">\n");

	printf("<Styles>\n");
	printf(" <Style ss:ID=\"s00\" ss:Name=\"Low\">\n");
	printf("  <Alignment ss:Vertical=\"Center\" ss:Horizonal=\"Center\" ss:WrapText=\"1\"/>\n");
	printf("  <Borders>\n");
	printf("   <Border ss:Position=\"Bottom\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n");
	printf("   <Border ss:Position=\"Left\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n");
	printf("   <Border ss:Position=\"Right\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n");
	printf("   <Border ss:Position=\"Top\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n");
	printf("  </Borders>\n");
	printf(" </Style>\n");
	printf(" <Style ss:ID=\"s10\" ss:Name=\"High\">\n");
	printf("  <Font ss:Size=\"11\" ss:Color=\"#9C0006\"/>\n");
	printf("  <Interior ss:Color=\"#FFC7CE\" ss:Pattern=\"Solid\"/>\n");
	printf("  <Alignment ss:Vertical=\"Center\" ss:Horizonal=\"Center\" ss:WrapText=\"1\"/>\n");
	printf("  <Borders>\n");
	printf("   <Border ss:Position=\"Bottom\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n");
	printf("   <Border ss:Position=\"Left\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n");
	printf("   <Border ss:Position=\"Right\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n");
	printf("   <Border ss:Position=\"Top\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n");
	printf("  </Borders>\n");
	printf(" </Style>\n");
	printf(" <Style ss:ID=\"s05\" ss:Name=\"Med\">\n");
	printf("  <Font ss:Size=\"11\" ss:Color=\"#9C6500\"/>\n");
	printf("  <Interior ss:Color=\"#FFEB9C\" ss:Pattern=\"Solid\"/>\n");
	printf("  <Alignment ss:Vertical=\"Center\" ss:Horizonal=\"Center\" ss:WrapText=\"1\"/>\n");
	printf("  <Borders>\n");
	printf("   <Border ss:Position=\"Bottom\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n");
	printf("   <Border ss:Position=\"Left\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n");
	printf("   <Border ss:Position=\"Right\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n");
	printf("   <Border ss:Position=\"Top\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n");
	printf("  </Borders>\n");
	printf(" </Style>\n");
	printf(" <Style ss:ID=\"header\" ss:Name=\"Header\">\n");
	printf("  <Font ss:Size=\"11\" ss:Color=\"#FFFFFF\"/>\n");
	printf("  <Interior ss:Color=\"#A5A5A5\" ss:Pattern=\"Solid\"/>\n");
	printf("  <Alignment ss:Vertical=\"Center\" ss:Horizontal=\"Center\" ss:WrapText=\"1\"/>\n");
	printf("  <Borders>\n");
	printf("   <Border ss:Position=\"Bottom\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n");
	printf("   <Border ss:Position=\"Left\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n");
	printf("   <Border ss:Position=\"Right\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n");
	printf("   <Border ss:Position=\"Top\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n");
	printf("  </Borders>\n");
	printf(" </Style>\n");
	printf("</Styles>\n");
	printf("<Worksheet ss:Name=\"Schema\">\n");
	printf("<Table>\n");
	# Plate Name
	printf(" <Column ss:AutoFitWidth=\"0\" ss:Width=\"190\"/>\n");
	# Plate Number
	printf(" <Column ss:AutoFitWidth=\"0\" ss:Width=\"45\"/>\n");
	# Field Number
	printf(" <Column ss:AutoFitWidth=\"0\" ss:Width=\"45\"/>\n");
	# Field Name
	printf(" <Column ss:AutoFitWidth=\"0\" ss:Width=\"65\"/>\n");
	# Field Alias
	printf(" <Column ss:AutoFitWidth=\"0\" ss:Width=\"65\"/>\n");
	# Field Type
	printf(" <Column ss:AutoFitWidth=\"0\" ss:Width=\"45\"/>\n");
	# Field Style
	printf(" <Column ss:AutoFitWidth=\"0\" ss:Width=\"65\"/>\n");
	# Field VisitDate
	printf(" <Column ss:AutoFitWidth=\"0\" ss:Width=\"45\"/>\n");
	# Field Desc
	printf(" <Column ss:AutoFitWidth=\"0\" ss:Width=\"175\"/>\n");
	# Field Legal
	printf(" <Column ss:AutoFitWidth=\"0\" ss:Width=\"125\"/>\n");
	# Field Help
	printf(" <Column ss:AutoFitWidth=\"0\" ss:Width=\"175\"/>\n");
	# Field Required
	printf(" <Column ss:AutoFitWidth=\"0\" ss:Width=\"65\"/>\n");
	# Field Reason Level
	printf(" <Column ss:AutoFitWidth=\"0\" ss:Width=\"45\"/>\n");
	# Field Reason Blank
	printf(" <Column ss:AutoFitWidth=\"0\" ss:Width=\"45\"/>\n");
	# Field Hidden
	printf(" <Column ss:AutoFitWidth=\"0\" ss:Width=\"45\"/>\n");
	# Field Display
	printf(" <Column ss:AutoFitWidth=\"0\" ss:Width=\"45\"/>\n");
	# Field Store
	printf(" <Column ss:AutoFitWidth=\"0\" ss:Width=\"45\"/>\n");
	# Field Format
	printf(" <Column ss:AutoFitWidth=\"0\" ss:Width=\"65\"/>\n");
	# Field Year
	printf(" <Column ss:AutoFitWidth=\"0\" ss:Width=\"45\"/>\n");
	# Field Impute
	printf(" <Column ss:AutoFitWidth=\"0\" ss:Width=\"45\"/>\n");
	# Field Skip n
	printf(" <Column ss:AutoFitWidth=\"0\" ss:Width=\"45\"/>\n");
	# Field Skip c
	printf(" <Column ss:AutoFitWidth=\"0\" ss:Width=\"45\"/>\n");
	# Field EC Plate Enter
	printf(" <Column ss:AutoFitWidth=\"0\" ss:Width=\"275\"/>\n");
	# Field EC Field Enter
	printf(" <Column ss:AutoFitWidth=\"0\" ss:Width=\"275\"/>\n");
	# Field EC Field Exit
	printf(" <Column ss:AutoFitWidth=\"0\" ss:Width=\"275\"/>\n");
	# Field EC Plate Exit
	printf(" <Column ss:AutoFitWidth=\"0\" ss:Width=\"275\"/>\n");
	# Field Coding
	printf(" <Column ss:AutoFitWidth=\"0\" ss:Width=\"275\"/>\n");
}

function excel_header()
{
	printf("   <Row>\n");
	printf("    <Cell ss:StyleID=\"header\"><Data ss:Type=\"String\">Plate Description</Data></Cell>\n");
	printf("    <Cell ss:StyleID=\"header\"><Data ss:Type=\"String\">Plate</Data></Cell>\n");
	printf("    <Cell ss:StyleID=\"header\"><Data ss:Type=\"String\">Field #</Data></Cell>\n");
	printf("    <Cell ss:StyleID=\"header\"><Data ss:Type=\"String\">Name</Data></Cell>\n");
	printf("    <Cell ss:StyleID=\"header\"><Data ss:Type=\"String\">Alias</Data></Cell>\n");
	printf("    <Cell ss:StyleID=\"header\"><Data ss:Type=\"String\">Type</Data></Cell>\n");
	printf("    <Cell ss:StyleID=\"header\"><Data ss:Type=\"String\">Style</Data></Cell>\n");
	printf("    <Cell ss:StyleID=\"header\"><Data ss:Type=\"String\">Visit Date</Data></Cell>\n");
	printf("    <Cell ss:StyleID=\"header\"><Data ss:Type=\"String\">Description</Data></Cell>\n");
	printf("    <Cell ss:StyleID=\"header\"><Data ss:Type=\"String\">Legal Range</Data></Cell>\n");
	printf("    <Cell ss:StyleID=\"header\"><Data ss:Type=\"String\">Help</Data></Cell>\n");
	printf("    <Cell ss:StyleID=\"header\"><Data ss:Type=\"String\">Required</Data></Cell>\n");
	printf("    <Cell ss:StyleID=\"header\"><Data ss:Type=\"String\">Reason Level</Data></Cell>\n");
	printf("    <Cell ss:StyleID=\"header\"><Data ss:Type=\"String\">Reason on Blank</Data></Cell>\n");
	printf("    <Cell ss:StyleID=\"header\"><Data ss:Type=\"String\">Hidden</Data></Cell>\n");
	printf("    <Cell ss:StyleID=\"header\"><Data ss:Type=\"String\">Display</Data></Cell>\n");
	printf("    <Cell ss:StyleID=\"header\"><Data ss:Type=\"String\">Store</Data></Cell>\n");
	printf("    <Cell ss:StyleID=\"header\"><Data ss:Type=\"String\">Format</Data></Cell>\n");
	printf("    <Cell ss:StyleID=\"header\"><Data ss:Type=\"String\">Year</Data></Cell>\n");
	printf("    <Cell ss:StyleID=\"header\"><Data ss:Type=\"String\">Impute</Data></Cell>\n");
	printf("    <Cell ss:StyleID=\"header\"><Data ss:Type=\"String\">Skip #</Data></Cell>\n");
	printf("    <Cell ss:StyleID=\"header\"><Data ss:Type=\"String\">Skip Cond</Data></Cell>\n");
	printf("    <Cell ss:StyleID=\"header\"><Data ss:Type=\"String\">Plate Enter</Data></Cell>\n");
	printf("    <Cell ss:StyleID=\"header\"><Data ss:Type=\"String\">Field Enter</Data></Cell>\n");
	printf("    <Cell ss:StyleID=\"header\"><Data ss:Type=\"String\">Field Exit</Data></Cell>\n");
	printf("    <Cell ss:StyleID=\"header\"><Data ss:Type=\"String\">Plate Exit</Data></Cell>\n");
	printf("    <Cell ss:StyleID=\"header\"><Data ss:Type=\"String\">Coding</Data></Cell>\n");
	printf("   </Row>\n");
}

function excel_close()
{
	printf("</Table>\n");
	printf("<WorksheetOptions xmlns=\"urn:schemas-microsoft-com:office:excel\">\n");
	printf(" <PageSetup>\n");
	printf("  <Layout x:Orientation=\"Landscape\"/>\n");
	printf("  <Header x:Data=\"&amp;LDFschema Report&amp;C" xml(center_header) "&amp;R&amp;D\"/>\n");
	printf("  <Footer x:Data=\"&amp;L" xml(study_name) "&amp;RPage &amp;P of &amp;N\"/>\n");
	printf(" </PageSetup>\n");
	printf(" <FreezePanes/>\n");
	printf(" <FrozenNoSplit/>\n");
	printf(" <SplitHorizontal>1</SplitHorizontal>\n");
	printf(" <TopRowBottomPane>1</TopRowBottomPane>\n");
	printf(" <ActivePane>2</ActivePane>\n");
	printf(" <Panes>\n");
	printf("  <Pane>\n");
	printf("   <Number>3</Number>\n");
	printf("  </Pane>\n");
	printf("  <Pane>\n");
	printf("   <Number>2</Number>\n");
	printf("   <ActiveRow>0</ActiveRow>\n");
	printf("  </Pane>\n");
	printf(" </Panes>\n");
	printf("</WorksheetOptions>\n");

	printf("<AutoFilter x:Range=\"R1C1:R1C27\"\n");
	printf(" xmlns=\"urn:schemas-microsoft-com:office:excel\">\n");
	printf("</AutoFilter>\n");
	printf("</Worksheet>\n");
	printf("</Workbook>\n");
}

function csv(s)
{
	if (index(s, ",") || index(s, "\"")) {
		gsub("\"", "\"\"", s);
		s = "\"" s "\"";
	}
	return s;
}

function csv_header()
{
	printf("Plate Description,");
	printf("Plate,");
	printf("Field #,");
	printf("Name,");
	printf("Alias,");
	printf("Type,");
	printf("Style,");
	printf("Visit Date,");
	printf("Description,");
	printf("Legal Range,");
	printf("Help,");
	printf("Required,");
	printf("Reason Level,");
	printf("Reason on Blank,");
	printf("Hidden,");
	printf("Display,");
	printf("Store,");
	printf("Format,");
	printf("Year,");
	printf("Impute,");
	printf("Skip #,");
	printf("Skip Cond,");
	printf("Plate Enter,");
	printf("Field Enter,");
	printf("Field Exit,");
	printf("Plate Exit,");
	printf("Coding\n");
}

BEGIN {
	if (format == "xml") {
		excel_open();
		excel_header();
	}
	if (format == "csv") {
		csv_header();
	}
	FS="|";
}
{
	if (format=="xml") {
		print "  <Row>";
		s = "";
		for (i=1; i<=NF; i++) {
			s = s "     <Cell ss:StyleID=\"s00\"><Data ss:Type=\"";
			if (($i+0) == $i)
				s = s "Number";
			else
				s = s "String";
			s = s "\">" xml($i) "</Data></Cell>\n";
		}
		print s "  </Row>";
	} else if (format == "csv") {
		for (i=1; i<=NF; i++) {
			printf("%s", csv($i));
			if (i != NF) printf(",");
		}
		printf("\n");
	} else {
		print $0;
	}
}

END {
	if (format == "xml") {
		excel_close();
	}
} ' >$OUTFILE
echo "Output file is: $OUTFILE"
cp -f $OUTFILE $GENERIC_OUTFILE
